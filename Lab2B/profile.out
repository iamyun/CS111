Total: 459 samples
     373  81.3%  81.3%      459 100.0% thread_routine
      60  13.1%  94.3%       60  13.1% __strcmp_sse42
      16   3.5%  97.8%       49  10.7% SortedList_insert
       8   1.7%  99.6%       37   8.1% SortedList_lookup
       2   0.4% 100.0%        2   0.4% _init
       0   0.0% 100.0%      459 100.0% __clone
       0   0.0% 100.0%      459 100.0% start_thread
ROUTINE ====================== thread_routine in /u/eng/class/classpqf/Desktop/CS111/Lab2B/lab2_list.c
   373    459 Total samples (flat / cumulative)
     .      .   54: 	randKey[keylen] = '\0';
     .      .   55: 
     .      .   56: 	return randKey;
     .      .   57: }
     .      .   58: 
---
     .      .   59: void* thread_routine(void *arg) {
     .      .   60: 	int tid = *(int*) arg;
     .      .   61: 	int i, j;
     .      .   62: 	int start = tid*itNum;
     .      .   63: 	int end = (tid+1)*itNum;
     .      .   64: 
     .      .   65: 	//insert element
     .      .   66: 	for (i = start; i < end; i++) {
     .      .   67: 		if (sync_opt == 0)
     .      .   68: 			SortedList_insert(list, Elem_list[i]);
     .      .   69: 		else {
     .      .   70: 			switch(sync_opt) 
     .      .   71: 			{
     .      .   72: 				case 'm':
     .      .   73: 				{
     .      .   74: 					pthread_mutex_lock(&list_mutex);
     .      .   75: 					SortedList_insert(list, Elem_list[i]);
     .      .   76: 					pthread_mutex_unlock(&list_mutex);
     .      .   77: 					break;
     .      .   78: 				}
     .      .   79: 				case 's':
     .      .   80: 				{
   290    290   81: 					while(__sync_lock_test_and_set(&lock, 1));
     .     49   82: 					SortedList_insert(list, Elem_list[i]);
     .      .   83: 					__sync_lock_release(&lock);
     .      .   84: 					break;
     .      .   85: 				}
     .      .   86: 				default:
     .      .   87: 					fprintf(stderr, "Error: sync insert failed.\n");
     .      .   88: 					exit(2);
     .      .   89: 			}
     .      .   90: 		}
     .      .   91: 		//fprintf(stderr, "insert: %s  i: %d\n", Elem_list[i]->key, i);
     .      .   92: 	}
     .      .   93: 
     .      .   94: 	//gets the list length
     .      .   95: 	if (sync_opt == 0)
     .      .   96: 		listLen = SortedList_length(list);
     .      .   97: 	else {
     .      .   98: 		switch(sync_opt) 
     .      .   99: 		{
     .      .  100: 			case 'm':
     .      .  101: 			{
     .      .  102: 				pthread_mutex_lock(&list_mutex);
     .      .  103: 				listLen = SortedList_length(list);
     .      .  104: 				pthread_mutex_unlock(&list_mutex);
     .      .  105: 				break;
     .      .  106: 			}
     .      .  107: 			case 's':
     .      .  108: 			{
     .      .  109: 				while(__sync_lock_test_and_set(&lock, 1));
     .      .  110: 				listLen = SortedList_length(list);
     .      .  111: 				__sync_lock_release(&lock);
     .      .  112: 				break;
     .      .  113: 			}
     .      .  114: 			default:
     .      .  115: 				fprintf(stderr, "Error: sync length failed.\n");
     .      .  116: 				exit(2);
     .      .  117: 		}
     .      .  118: 	}
     .      .  119: 	if (listLen < 0) {
     .      .  120: 		fprintf(stderr, "Error: Failed finding list length. List is corrupted.\n");
     .      .  121: 		exit(2);
     .      .  122: 	}
     .      .  123: 
     .      .  124: 	//look up and delete
     .      .  125: 	SortedListElement_t *cur;
     .      .  126: 	int rc;
     .      .  127: 	for (j = start; j < end; j++) {
     .      .  128: 		//look up and delete element
     .      .  129: 		if (sync_opt == 0) {
     .      .  130: 			cur = SortedList_lookup(list, Elem_list[j]->key);
     .      .  131: 			rc = SortedList_delete(cur);
     .      .  132: 		}
     .      .  133: 		else {
     .      .  134: 			switch(sync_opt) 
     .      .  135: 			{
     .      .  136: 				case 'm':
     .      .  137: 				{
     .      .  138: 					pthread_mutex_lock(&list_mutex);
     .      .  139: 					cur = SortedList_lookup(list, Elem_list[j]->key);
     .      .  140: 					rc = SortedList_delete(cur);
     .      .  141: 					pthread_mutex_unlock(&list_mutex);
     .      .  142: 					break;
     .      .  143: 				}
     .      .  144: 				case 's':
     .      .  145: 				{
    83     83  146: 					while(__sync_lock_test_and_set(&lock, 1));
     .     37  147: 					cur = SortedList_lookup(list, Elem_list[j]->key);
     .      .  148: 					rc = SortedList_delete(cur);
     .      .  149: 					__sync_lock_release(&lock);
     .      .  150: 					break;
     .      .  151: 				}
     .      .  152: 				default:
     .      .  153: 					fprintf(stderr, "Error: sync delete failed.\n");
     .      .  154: 					exit(2);
     .      .  155: 			}
     .      .  156: 		}
     .      .  157: 		if (rc != 0) {
     .      .  158: 			fprintf(stderr, "Error: Failed deleting the list element %s. List is corrupted.\n", Elem_list[j]->key);
     .      .  159: 			exit(2);
     .      .  160: 		}
     .      .  161: 	}
     .      .  162: 
     .      .  163: 	//find the final listLen
     .      .  164: 	//listLen = SortedList_length(list);
     .      .  165: 	//fprintf(stderr, "%ld\n", listLen);
     .      .  166: 
     .      .  167: 	return NULL;
     .      .  168: }
---
     .      .  169: 
     .      .  170: int main(int argc, char **argv) {
     .      .  171: 	int ret = 0;
     .      .  172: 	char testopt[20] = "list-";
     .      .  173: 	//char *yield_opt = NULL;
ROUTINE ====================== thread_routine in /u/eng/class/classpqf/Desktop/CS111/Lab2B/lab2_list.c
   373    459 Total samples (flat / cumulative)
     .      .   54: 	randKey[keylen] = '\0';
     .      .   55: 
     .      .   56: 	return randKey;
     .      .   57: }
     .      .   58: 
---
     .      .   59: void* thread_routine(void *arg) {
     .      .   60: 	int tid = *(int*) arg;
     .      .   61: 	int i, j;
     .      .   62: 	int start = tid*itNum;
     .      .   63: 	int end = (tid+1)*itNum;
     .      .   64: 
     .      .   65: 	//insert element
     .      .   66: 	for (i = start; i < end; i++) {
     .      .   67: 		if (sync_opt == 0)
     .      .   68: 			SortedList_insert(list, Elem_list[i]);
     .      .   69: 		else {
     .      .   70: 			switch(sync_opt) 
     .      .   71: 			{
     .      .   72: 				case 'm':
     .      .   73: 				{
     .      .   74: 					pthread_mutex_lock(&list_mutex);
     .      .   75: 					SortedList_insert(list, Elem_list[i]);
     .      .   76: 					pthread_mutex_unlock(&list_mutex);
     .      .   77: 					break;
     .      .   78: 				}
     .      .   79: 				case 's':
     .      .   80: 				{
   290    290   81: 					while(__sync_lock_test_and_set(&lock, 1));
     .     49   82: 					SortedList_insert(list, Elem_list[i]);
     .      .   83: 					__sync_lock_release(&lock);
     .      .   84: 					break;
     .      .   85: 				}
     .      .   86: 				default:
     .      .   87: 					fprintf(stderr, "Error: sync insert failed.\n");
     .      .   88: 					exit(2);
     .      .   89: 			}
     .      .   90: 		}
     .      .   91: 		//fprintf(stderr, "insert: %s  i: %d\n", Elem_list[i]->key, i);
     .      .   92: 	}
     .      .   93: 
     .      .   94: 	//gets the list length
     .      .   95: 	if (sync_opt == 0)
     .      .   96: 		listLen = SortedList_length(list);
     .      .   97: 	else {
     .      .   98: 		switch(sync_opt) 
     .      .   99: 		{
     .      .  100: 			case 'm':
     .      .  101: 			{
     .      .  102: 				pthread_mutex_lock(&list_mutex);
     .      .  103: 				listLen = SortedList_length(list);
     .      .  104: 				pthread_mutex_unlock(&list_mutex);
     .      .  105: 				break;
     .      .  106: 			}
     .      .  107: 			case 's':
     .      .  108: 			{
     .      .  109: 				while(__sync_lock_test_and_set(&lock, 1));
     .      .  110: 				listLen = SortedList_length(list);
     .      .  111: 				__sync_lock_release(&lock);
     .      .  112: 				break;
     .      .  113: 			}
     .      .  114: 			default:
     .      .  115: 				fprintf(stderr, "Error: sync length failed.\n");
     .      .  116: 				exit(2);
     .      .  117: 		}
     .      .  118: 	}
     .      .  119: 	if (listLen < 0) {
     .      .  120: 		fprintf(stderr, "Error: Failed finding list length. List is corrupted.\n");
     .      .  121: 		exit(2);
     .      .  122: 	}
     .      .  123: 
     .      .  124: 	//look up and delete
     .      .  125: 	SortedListElement_t *cur;
     .      .  126: 	int rc;
     .      .  127: 	for (j = start; j < end; j++) {
     .      .  128: 		//look up and delete element
     .      .  129: 		if (sync_opt == 0) {
     .      .  130: 			cur = SortedList_lookup(list, Elem_list[j]->key);
     .      .  131: 			rc = SortedList_delete(cur);
     .      .  132: 		}
     .      .  133: 		else {
     .      .  134: 			switch(sync_opt) 
     .      .  135: 			{
     .      .  136: 				case 'm':
     .      .  137: 				{
     .      .  138: 					pthread_mutex_lock(&list_mutex);
     .      .  139: 					cur = SortedList_lookup(list, Elem_list[j]->key);
     .      .  140: 					rc = SortedList_delete(cur);
     .      .  141: 					pthread_mutex_unlock(&list_mutex);
     .      .  142: 					break;
     .      .  143: 				}
     .      .  144: 				case 's':
     .      .  145: 				{
    83     83  146: 					while(__sync_lock_test_and_set(&lock, 1));
     .     37  147: 					cur = SortedList_lookup(list, Elem_list[j]->key);
     .      .  148: 					rc = SortedList_delete(cur);
     .      .  149: 					__sync_lock_release(&lock);
     .      .  150: 					break;
     .      .  151: 				}
     .      .  152: 				default:
     .      .  153: 					fprintf(stderr, "Error: sync delete failed.\n");
     .      .  154: 					exit(2);
     .      .  155: 			}
     .      .  156: 		}
     .      .  157: 		if (rc != 0) {
     .      .  158: 			fprintf(stderr, "Error: Failed deleting the list element %s. List is corrupted.\n", Elem_list[j]->key);
     .      .  159: 			exit(2);
     .      .  160: 		}
     .      .  161: 	}
     .      .  162: 
     .      .  163: 	//find the final listLen
     .      .  164: 	//listLen = SortedList_length(list);
     .      .  165: 	//fprintf(stderr, "%ld\n", listLen);
     .      .  166: 
     .      .  167: 	return NULL;
     .      .  168: }
---
     .      .  169: 
     .      .  170: int main(int argc, char **argv) {
     .      .  171: 	int ret = 0;
     .      .  172: 	char testopt[20] = "list-";
     .      .  173: 	//char *yield_opt = NULL;
